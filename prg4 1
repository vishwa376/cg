Develop a program to demonstrate 2D transformation on basic objects

#include <stdio.h>
#include <math.h>
#include <GL/glut.h>

GLfloat t[3][3] = {
    {10.0, 30.0, 20.0},  // X coordinates of the triangle vertices
    {20.0, 20.0, 40.0},  // Y coordinates of the triangle vertices
    {1.0, 1.0, 1.0}      // Homogeneous coordinate
};

GLfloat rotatemat[3][3] = { {0}, {0}, {0} }; // Rotation matrix
GLfloat result[3][3] = { {0}, {0}, {0} };    // Resulting coordinates after rotation

GLfloat xr = 10.0; // X coordinate of the fixed point
GLfloat yr = 20.0; // Y coordinate of the fixed point

GLfloat theta; // Rotation angle
GLint ch;      // User choice for rotation type

// Function to multiply the rotation matrix with the transformation matrix
void multiply() {
    int i, j, k;
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            result[i][j] = 0; // Initialize result matrix
            for (k = 0; k < 3; k++)
                result[i][j] += rotatemat[i][k] * t[k][j]; // Matrix multiplication
        }
    }
}

// Function to rotate about the origin
void rotate_about_origin() {
    rotatemat[0][0] = cos(theta);
    rotatemat[0][1] = -sin(theta);
    rotatemat[0][2] = 0;
    rotatemat[1][0] = sin(theta);
    rotatemat[1][1] = cos(theta);
    rotatemat[1][2] = 0;
    rotatemat[2][0] = 0;
    rotatemat[2][1] = 0;
    rotatemat[2][2] = 1;
    multiply();
}

// Function to rotate about a fixed point (xr, yr)
void rotate_about_fixed_point() {
    GLfloat m, n;

    // Calculate translation values
    m = xr * (1 - cos(theta)) + yr * sin(theta);
    n = yr * (1 - cos(theta)) - xr * sin(theta);

    rotatemat[0][0] = cos(theta);
    rotatemat[0][1] = -sin(theta);
    rotatemat[0][2] = m;
    rotatemat[1][0] = sin(theta);
    rotatemat[1][1] = cos(theta);
    rotatemat[1][2] = n;
    rotatemat[2][0] = 0;
    rotatemat[2][1] = 0;
    rotatemat[2][2] = 1;
    multiply();
}

// Function to draw the original triangle
void draw_triangle() {
    glLineWidth(10);
    glBegin(GL_LINE_LOOP);
        glColor3f(1.0, 0.0, 0.0); // Red vertex
        glVertex2f(t[0][0], t[1][0]);
        
        glColor3f(0.0, 1.0, 0.0); // Green vertex
        glVertex2f(t[0][1], t[1][1]);
        
        glColor3f(0.0, 0.0, 1.0); // Blue vertex
        glVertex2f(t[0][2], t[1][2]);
    glEnd();
    glFlush();
}

// Function to draw the rotated triangle
void draw_rotated_triangle() {
    glLineWidth(10);
    glBegin(GL_LINE_LOOP);
        glColor3f(1.0, 0.0, 0.0); // Red vertex
        glVertex2f(result[0][0], result[1][0]);
        
        glColor3f(0.0, 1.0, 0.0); // Green vertex
        glVertex2f(result[0][1], result[1][1]);
        
        glColor3f(0.0, 0.0, 1.0); // Blue vertex
        glVertex2f(result[0][2], result[1][2]);
    glEnd();
    glFlush();
}

// Display function to render the objects
void display() {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the window
    if (ch == 1) {
        draw_triangle();          // Draw original triangle
        rotate_about_origin();   // Rotate about the origin
        draw_rotated_triangle(); // Draw rotated triangle
    }
    if (ch == 2) {
        draw_triangle();            // Draw original triangle
        rotate_about_fixed_point(); // Rotate about fixed point
        draw_rotated_triangle();    // Draw rotated triangle
    }
}

// Initialization function
void myinit() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white
    glMatrixMode(GL_PROJECTION);       // Set projection matrix
    glLoadIdentity();
    gluOrtho2D(-50.0, 50.0, -50.0, 50.0); // Set the coordinate system
}

// Main function
int main(int argc, char **argv) {
    printf("***Rotation***\n1. Rotation about origin\n2. Rotation about a fixed point (xr, yr)\n");
    printf("Enter choice: ");
    scanf("%d", &ch);
    printf("Enter the rotation angle (in degrees): ");
    scanf("%f", &theta);
    theta = theta * (M_PI / 180); // Convert degrees to radians
    
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Triangle Rotation");
    glutDisplayFunc(display);
    myinit();
    glutMainLoop(); // Enter the GLUT event loop
    return 0;
}








Compilation and Execution Instructions:
gcc -o 2D_transform 2D_transform.c -lGL -lGLU -lglut
./2D_transform
