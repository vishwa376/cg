Develop a program to demonstrate basic geometric operations on the 2D object 


#include <stdio.h>
#include <GL/glut.h>

typedef float point2[2];

/* Initial triangle vertices */
point2 v[] = {{-1.0, -0.58}, {1.0, -0.58}, {0.0, 1.15}};
int n;  // Number of subdivisions

/* Display one triangle */
void triangle(point2 a, point2 b, point2 c)
{
    glBegin(GL_TRIANGLES);
        glVertex2fv(a);
        glVertex2fv(b);
        glVertex2fv(c);
    glEnd();
}

/* Recursive subdivision of a triangle */
void divide_triangle(point2 a, point2 b, point2 c, int m)
{
    point2 v0, v1, v2;
    int j;

    if (m > 0) {
        for (j = 0; j < 2; j++) v0[j] = (a[j] + b[j]) / 2;
        for (j = 0; j < 2; j++) v1[j] = (a[j] + c[j]) / 2;
        for (j = 0; j < 2; j++) v2[j] = (b[j] + c[j]) / 2;

        divide_triangle(a, v0, v1, m - 1);
        divide_triangle(c, v1, v2, m - 1);
        divide_triangle(b, v2, v0, m - 1);
    } else {
        triangle(a, b, c);  // Draw triangle at end of recursion
    }
}

/* Display callback */
void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    divide_triangle(v[0], v[1], v[2], n);
    glFlush();
}

/* Initialize OpenGL state */
void myinit()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-2.0, 2.0, -2.0, 2.0);
    glMatrixMode(GL_MODELVIEW);
    glClearColor(1.0, 1.0, 1.0, 1.0);  // White background
    glColor3f(0.0, 0.0, 0.0);  // Black drawing color
}

/* Main function */
int main(int argc, char **argv)
{
    printf("Number of subdivisions: ");
    scanf("%d", &n);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Sierpinski Gasket 2D Triangle");
    glutDisplayFunc(display);
    myinit();
    glutMainLoop();

    return 0;
}
